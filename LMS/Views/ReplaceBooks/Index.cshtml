@{
    var levels = ViewBag.Levels;
}

<body style="text-align:center;">
    <h1 class="page-headings">Sort The Call Numbers In Ascending Order</h1>

    <select class="custom-select" id="level-select">
        <option value="Beginner">Beginner</option>
        <option value="Intermediate">Intermediate</option>
        <option value="Challenger">Challenger</option>
        <option value="Expert">Expert</option>
    </select>

    <div class="d-flex justify-content-end">
        <button id="info" type="button" class="info-btn" data-bs-toggle="popover" data-bs-placement="bottom" data-bs-container="body" data-bs-title="How to play">ℹ️</button>
    </div>
    <ul id="sortable-list">
        @{
            // Define an array of colors
            string[] colors = { "#FFBE0B", "#FB5607", "#FF006E", "#8338EC", "#3A86FF", "#5DD39E", "#CFBFF7", "#107E7D", "#BEEE62", "#FFB8DE" };
        }

        @foreach (var item in ViewBag.Items)
        {
            // Generate a random index to select a color
            int randomIndex = new Random().Next(0, colors.Length);
            string randomColor = colors[randomIndex];

            <li class="book-boxes" draggable="true" style="background-color: @randomColor;">
                <div class="card">
                    <div class="card-body">
                        <p class="card-text">@item</p>
                    </div>
                </div>
            </li>
        }
    </ul>

    <button id="check-submit-button">Check</button>

    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        var levels = @Html.Raw(Json.Serialize(levels));
        const infoButton = document.getElementById('info');
        var popoverInstance = null; // Initialize the popover instance
        var popoverVisible = false; // Custom flag to track visibility

        function updatePopoverContent() {
            const selectElement = document.getElementById('level-select');
            const selectedValue = selectElement.value;
            const popoverContent = levels[selectedValue];

            // Update the popover's content attribute
            infoButton.setAttribute('data-bs-content', popoverContent);

            if (popoverInstance) {
                // Dispose of the existing popover instance
                popoverInstance.dispose();
            }

            // Reinitialize the popover to apply the updated content
            popoverInstance = new bootstrap.Popover(infoButton, {
                container: 'body' // Specify the container to fix the issue with dynamic content
            });

            if (popoverVisible) {
                // If the popover was visible before, hide it
                popoverInstance.hide();
                popoverVisible = false;
            } else {
                // Otherwise, show the popover
                popoverInstance.show();
                popoverVisible = true;
            }
        }

        infoButton.addEventListener('click', updatePopoverContent);

        // Call updatePopoverContent initially to set the initial content
        updatePopoverContent();    

        const list = document.getElementById('sortable-list');
        let draggingElement = null;

        list.addEventListener('dragstart', (e) => {
            draggingElement = e.target;
            e.dataTransfer.setData('text/plain', e.target.textContent);
            e.target.classList.add('dragging');
        });

        list.addEventListener('dragover', (e) => {
            e.preventDefault();
        });

        list.addEventListener('dragenter', (e) => {
            const listItem = e.target.closest('li');

            if (listItem && listItem !== draggingElement) {
                const mouseY = e.clientY;
                const boundingBox = listItem.getBoundingClientRect();
                const halfwayPoint = boundingBox.top + boundingBox.height / 2;

                // Determine the position to insert the dragged item
                const insertBefore = mouseY < halfwayPoint;

                if (insertBefore) {
                    list.insertBefore(draggingElement, listItem);
                } else {
                    list.insertBefore(draggingElement, listItem.nextSibling);
                }
            }
        });

        list.addEventListener('dragleave', (e) => {
            e.preventDefault();
        });

        list.addEventListener('drop', (e) => {
            e.preventDefault();
            e.target.classList.remove('over-top-half', 'over-bottom-half');
        });

        list.addEventListener('dragend', (e) => {
            e.target.classList.remove('dragging');
        });

        const submitButton = document.getElementById('check-submit-button');

        // Attach the handleSubmit function to the submit button's click event
        submitButton.addEventListener('click', handleSubmit);

        // Define the handleSubmit function
        function handleSubmit() {
            // Get the sorted order of the items
            const sortedItems = Array.from(list.children).map(li => li.textContent);

            console.log('Data to send:', sortedItems);

            // Send the sortedItems to the server using a POST request
            fetch('/ReplaceBooks/SubmitSortedItems', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(sortedItems), // Send the array directly, not as an object
            })
                .then(response => {
                    if (response.ok) {
                        // Handle success, you can show a message to the user if needed
                        console.log('Sorted items submitted successfully');
                    } else {
                        // Handle error, you can show an error message to the user if needed
                        console.error('Error submitting sorted items');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }
    </script>
</body>
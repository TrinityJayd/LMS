<body style="text-align:center;">
    <h1 class="page-headings">Sort The Call Numbers In Ascending Order</h1>
    <ul id="sortable-list">
        @{
            // Define an array of colors
            string[] colors = { "#FF5733", "#33FF57", "#5733FF", "#FF33A3", "#33A3FF", "#FFFF33", "#33FFFF", "#333333", "#777777", "#AAAAAA" };
        }

        @foreach (var item in ViewBag.Items)
        {
            // Generate a random index to select a color
            int randomIndex = new Random().Next(0, colors.Length);
            string randomColor = colors[randomIndex];

            <li class="book-boxes" draggable="true" style="background-color: @randomColor;">
                <div class="card">
                    <div class="card-body">
                        <p class="card-text">@item</p>
                    </div>
                </div>
            </li>
        }
    </ul>

    <button id="check-submit-button">Check</button>

    <script>
        const list = document.getElementById('sortable-list');
        let draggingElement = null;

        list.addEventListener('dragstart', (e) => {
            draggingElement = e.target;
            e.dataTransfer.setData('text/plain', e.target.textContent);
            e.target.classList.add('dragging');
        });

        list.addEventListener('dragover', (e) => {
            e.preventDefault();
        });

        list.addEventListener('dragenter', (e) => {
            const listItem = e.target.closest('li');

            if (listItem && listItem !== draggingElement) {
                const mouseY = e.clientY;
                const boundingBox = listItem.getBoundingClientRect();
                const halfwayPoint = boundingBox.top + boundingBox.height / 2;

                // Determine the position to insert the dragged item
                const insertBefore = mouseY < halfwayPoint;

                if (insertBefore) {
                    list.insertBefore(draggingElement, listItem);
                } else {
                    list.insertBefore(draggingElement, listItem.nextSibling);
                }
            }
        });

        list.addEventListener('dragleave', (e) => {
            e.preventDefault();
        });

        list.addEventListener('drop', (e) => {
            e.preventDefault();
            e.target.classList.remove('over-top-half', 'over-bottom-half');
        });

        list.addEventListener('dragend', (e) => {
            e.target.classList.remove('dragging');
        });

        const submitButton = document.getElementById('check-submit-button');

        // Attach the handleSubmit function to the submit button's click event
        submitButton.addEventListener('click', handleSubmit);

        // Define the handleSubmit function
        function handleSubmit() {
            // Get the sorted order of the items
            const sortedItems = Array.from(list.children).map(li => li.textContent);

            console.log('Data to send:', sortedItems);

            // Send the sortedItems to the server using a POST request
            fetch('/ReplaceBooks/SubmitSortedItems', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(sortedItems), // Send the array directly, not as an object
            })
                .then(response => {
                    if (response.ok) {
                        // Handle success, you can show a message to the user if needed
                        console.log('Sorted items submitted successfully');
                    } else {
                        // Handle error, you can show an error message to the user if needed
                        console.error('Error submitting sorted items');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }
    </script>
</body>